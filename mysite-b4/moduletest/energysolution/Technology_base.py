class 技术路线类:
    def __init__(self, 名称, 数据, 锅炉额定产汽量 = 0, 额定制冷量 = 0):
        self.数据 = 数据
        self.名称 = 名称
        self.锅炉额定产汽量 = 锅炉额定产汽量
        self.额定制冷量 = 额定制冷量
        self.产蒸汽 = False
        self.制冷 = False
        if  self.锅炉额定产汽量 > 0:
            self.产蒸汽 = True
        if  self.额定制冷量 > 0:
            self.制冷 = True

        # 成员变量初始化
        self.投入产出量索引列表 = ['发电量', '产汽量', '制冷量', '自耗电量', '耗气量', '耗水量']
        self.设备实时量 = dict()
        self.设备全年量 = dict()
        for key in self.投入产出量索引列表:
            self.设备实时量[key] = [0] * 8760
            self.设备全年量[key] = 0

        self.实时单位产汽运行收益 = 0
        self.实时单位制冷运行收益 = 0
        self.设备实时量['单位产汽运行收益'] = [0] * 8760
        self.设备实时量['单位制冷运行收益'] = [0] * 8760

        self.设备价格 = 0
        self.发电机规模 = 0
        self.额定耗气量 = 0
        self.满负荷运行小时数 = 0
        self.发电效率 = 0
        self.余热锅炉装机规模 = 0
        self.溴冷机装机规模 = 0

        self.自耗电比例 = 0
        self.耗水率 = 0
        self.满负荷运行小时数限制 = 0
        self.单位制冷耗蒸汽量 = 0
        self.锅炉单位产汽耗电量 = 0
        self.单位制冷耗电量 = 0

    def 计算实时单位产汽运行收益(self, i):
        if self.产蒸汽 is True:
            单位产汽燃气成本 = (self.额定耗气量 / self.锅炉额定产汽量) * self.数据.数据索引['燃气价格']
            单位产汽自耗电成本 = ((self.发电机规模 / self.锅炉额定产汽量) * self.自耗电比例 + self.锅炉单位产汽耗电量) * self.数据.数据索引['用电价格'][i]
            单位产汽水成本 = self.数据.数据索引['水价格'] * self.耗水率
            单位产汽蒸汽收入 = self.数据.数据索引['蒸汽价格']
            单位产汽供电收入 = (self.发电机规模 / self.锅炉额定产汽量) * self.数据.数据索引['供电价格'][i]
            单位产汽运行收益 = 单位产汽蒸汽收入 + 单位产汽供电收入 - 单位产汽燃气成本 - 单位产汽自耗电成本 - 单位产汽水成本
        else:
            单位产汽运行收益 = 0
        return 单位产汽运行收益

    def 计算实时单位制冷运行收益(self, i):
        if self.制冷 is True:
            if self.产蒸汽 is True:
                单位制冷燃气成本 = (self.额定耗气量 * self.单位制冷耗蒸汽量 / self.锅炉额定产汽量) * self.数据.数据索引['燃气价格']
                单位制冷供电收入 = (self.发电机规模 * self.单位制冷耗蒸汽量 / self.锅炉额定产汽量) * self.数据.数据索引['供电价格'][i]
                单位制冷自耗电成本 = ((self.发电机规模 * self.单位制冷耗蒸汽量 / self.锅炉额定产汽量) * self.自耗电比例 + self.单位制冷耗电量) * self.数据.数据索引['用电价格'][i]
            else:
                单位制冷燃气成本 = (self.额定耗气量 / self.额定制冷量) * self.数据.数据索引['燃气价格']
                单位制冷自耗电成本 = ((self.发电机规模 / self.额定制冷量) * self.自耗电比例 + self.单位制冷耗电量) * self.数据.数据索引['用电价格'][i]
                单位制冷供电收入 = (self.发电机规模 / self.额定制冷量) * self.数据.数据索引['供电价格'][i]

            单位制冷水成本 = 0
            单位制冷冷量收入 = self.数据.数据索引['供冷价格']
            单位制冷运行收益 = 单位制冷冷量收入 + 单位制冷供电收入 - 单位制冷燃气成本 - 单位制冷自耗电成本 - 单位制冷水成本
        else:
            单位制冷运行收益 = 0
        return 单位制冷运行收益

    def 计算实时量(self, i):
        if self.产蒸汽 is True:
            self.设备实时量['发电量'][i] = (self.设备实时量['产汽量'][i] / self.锅炉额定产汽量) * self.发电机规模
            self.设备实时量['自耗电量'][i] = self.设备实时量['发电量'][i] * self.自耗电比例 + self.设备实时量['产汽量'][i] * self.锅炉单位产汽耗电量
            self.设备实时量['耗气量'][i] = (self.设备实时量['产汽量'][i] / self.锅炉额定产汽量) * self.额定耗气量
            self.设备实时量['耗水量'][i] = self.设备实时量['产汽量'][i] * self.耗水率
        if self.产蒸汽 is False and self.制冷 is True:
            self.设备实时量['发电量'][i] = (self.设备实时量['制冷量'][i] / self.额定制冷量) * self.发电机规模
            self.设备实时量['自耗电量'][i] = self.设备实时量['发电量'][i] * self.自耗电比例 + self.设备实时量['制冷量'][i] * self.单位制冷耗电量
            self.设备实时量['耗气量'][i] = (self.设备实时量['制冷量'][i] / self.额定制冷量) * self.额定耗气量
            self.设备实时量['耗水量'][i] = 0

