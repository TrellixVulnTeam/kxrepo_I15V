class 能源投入产出类:

	def __init__(self, 数据, 设备列表):
		self.数据 = 数据
		self.设备列表 = 设备列表
		self.系统实时量 = dict()
		self.系统全年量 = dict()
		self.发电机总满负荷运行小时数 = 0

		self.投入产出量索引列表 = ['发电量', '产汽量', '制冷量', '自耗电量', '耗气量', '耗水量']
		for key in self.投入产出量索引列表:
			self.系统实时量[key] = [0] * 8760
			self.系统全年量[key] = 0

		self.能源购售量索引列表 = ['售汽量', '售电量', '外购电量']
		for key in self.能源购售量索引列表:
			self.系统实时量[key] = [0] * 8760
			self.系统全年量[key] = 0

		# 成本收入
		self.蒸汽收入 = 0
		self.售电收入 = 0
		self.供冷收入 = 0
		self.供热收入 = 0
		self.光伏发电收入 = 0
		self.天然气销售收入 = 0
		self.燃气费 = 0
		self.水费 = 0
		self.电费 = 0
		self.工资及福利 = self.数据.数据索引['人数'] * self.数据.数据索引['工资']
		self.土地租金 = 0
		self.年总收入 = 0
		self.年总成本 = 0


		self.燃气轮机发电量 = 0
		self.燃气内燃机发电量 = 0
		self.执行计算过程()


	def 执行计算过程(self):
		self.计算全年量()
		self.确定余热设备装机规模()
		self.计算成本收入()
		self.生成成本收入索引列表()
		self.生成结果显示索引列表()


	def 生成成本收入索引列表(self):
		self.成本收入索引 = {
			'蒸汽收入': self.蒸汽收入,
			'售电收入': self.售电收入,
			'供冷收入': self.供冷收入,
			'供热收入': self.供热收入,
			'光伏发电收入': self.光伏发电收入,
			'燃气费': self.燃气费,
			'水费': self.水费,
			'电费': self.电费,
			'工资及福利': self.工资及福利
		}

	def 生成结果显示索引列表(self):
		self.结果显示索引列表 = {
			'发电量/万kWh': int(self.系统全年量['发电量'] / 10000),
			'外购电量/万kWh': int(self.系统全年量['外购电量'] / 10000),
			'自耗电量/万kWh': int(self.系统全年量['自耗电量'] / 10000),
			'售电量/万kWh': int(self.系统全年量['售电量'] / 10000),
			'产汽量/万t': round(self.系统全年量['产汽量'] / 10000, 2),
			'售汽量/万t': round(self.系统全年量['售汽量'] / 10000, 2),
			'耗气量/万方': int(self.系统全年量['耗气量'] / 10000),
			'耗水量': round((self.系统全年量['耗水量'] / 10000),2),
			'蒸汽收入/万元': int(self.蒸汽收入 / 10000),
			'售电收入/万万': int(self.售电收入 / 10000),
			'燃气费/万元': int(self.燃气费 / 10000),
			'电费/万元': int(self.电费 / 10000),
			'水费/万元': int(self.水费 / 10000),
		}


	def 计算全年量(self):
		for i in range(8760):
			self.计算设备其他实时量(i)
			for key in self.投入产出量索引列表:
				for 设备 in self.设备列表:
					self.系统实时量[key][i] += 设备.设备实时量[key][i]

		for key in self.投入产出量索引列表:
			for 设备 in self.设备列表:
				设备.设备全年量[key] = sum(设备.设备实时量[key])
			self.系统全年量[key] = sum(self.系统实时量[key])
			print(key, self.系统全年量[key])

		for i in range(8760):
			self.系统实时量['售汽量'][i] = self.系统实时量['产汽量'][i] * (1 - self.数据.数据索引['管损率'])

			if self.系统实时量['自耗电量'][i] * self.数据.数据索引['自耗电自供应比例'] > self.系统实时量['发电量'][i]:
				该小时自耗电自供应电量 = self.系统实时量['发电量'][i]
			else:
				该小时自耗电自供应电量 = self.系统实时量['自耗电量'][i] * self.数据.数据索引['自耗电自供应比例']
			self.系统实时量['售电量'][i] = (self.系统实时量['发电量'][i] - 该小时自耗电自供应电量)
			self.系统实时量['外购电量'][i] += (self.系统实时量['自耗电量'][i] - 该小时自耗电自供应电量)

		for key in self.能源购售量索引列表:
			self.系统全年量[key] = sum(self.系统实时量[key])
			print(key, self.系统全年量[key])


	def 计算成本收入(self):
		self.蒸汽收入 = self.系统全年量['售汽量'] * self.数据.数据索引['蒸汽价格']
		self.燃气费 = self.系统全年量['耗气量'] * self.数据.数据索引['燃气价格']
		self.水费 = self.系统全年量['耗水量'] * self.数据.数据索引['水价格']
		self.供冷收入 = self.系统全年量['制冷量'] * self.数据.数据索引['供冷价格']

		for time in range(8760):
			self.电费 += self.系统实时量['外购电量'][time] * self.数据.数据索引['市政电价'][time]
			if self.数据.数据索引['并网模式'] == '全额上网':
				self.售电收入 += self.系统实时量['售电量'][time] * self.数据.数据索引['上网电价'][time]
			elif self.数据.数据索引['并网模式'] == '自发自用':
				self.售电收入 += self.系统实时量['售电量'][time] * self.数据.数据索引['内部售电价'][time]
			elif self.数据.数据索引['并网模式'] == '自发自用余电上网':
				自发自用电量 = min(self.数据.数据索引['电负荷'][time], self.系统实时量['售电量'][time])
				上网电量 = self.系统实时量['售电量'][time] - 自发自用电量
				self.售电收入 += 自发自用电量 * self.数据.数据索引['内部售电价'][time] + 上网电量 * self.数据.数据索引['上网电价'][time]

	def 计算设备其他实时量(self, i):
		for 设备 in self.设备列表:
			设备.计算实时量(i)


	def 计算发电机设备发电量(self):
		for 设备 in self.设备列表:
			if 设备.名称 == '燃气轮机':
				self.燃气轮机发电量 += 设备.设备全年量['发电量']
			elif 设备.名称 == '燃气内燃机':
				self.燃气内燃机发电量 += 设备.设备全年量['发电量']

	def 确定余热设备装机规模(self):
		for 设备 in self.设备列表:
			if 设备.名称 == '燃气轮机' or 设备.名称 == '燃气内燃机':
				设备.余热锅炉装机规模 = max(设备.设备实时量['产汽量'])
				设备.溴冷机装机规模 = max(设备.设备实时量['制冷量'])



